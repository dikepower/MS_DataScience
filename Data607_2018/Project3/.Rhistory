colnames(df)[12]='Newcolname'
df
df[1:10]
df[1:10,]
df[1:3,2:3]
head(df,2)
df[-2,]
head(df)
df[df$mpg>20]
df[df$mpg>20,]
df[(df$mpg>20)&(df$cy==6),]
df[(df$mpg>20)&(df$cy==6),c('mpg', 'hp')]
subset(df,mpg>=20 &cly<=20)
subset(df,mpg>=20 &cyl<=20)
df[, c(1,2,3)]
is.na(mtcars)
any(is.na(df))
any(is.na(df$mpg))
df[isna.(df) <- 0
]
df[isna.(df)] <- 0
df[is.na(df)] <- 0
mtcars$mpg[is.na(mtcars$mpg)] <- mean(mtcars$mpg)
knitr::opts_chunk$set(echo = TRUE)
library(XML)
url <- "https://github.com/dikepower/607_DataAcquisition_And_Management/blob/master/Week7/book.html"
html_df <-  readHTMLTable(url)
url <- "https://raw.githubusercontent.com/dikepower/607_DataAcquisition_And_Management/master/Week7/book.html"
html_df <-  readHTMLTable(url)
url <- "https://raw.githubusercontent.com/dikepower/607_DataAcquisition_And_Management/master/Week7/book.html"
html_df <-  readHTMLTable(url)
url <- "https://raw.githubusercontent.com/dikepower/607_DataAcquisition_And_Management/master/Week7/book.html"
html_df <-  readHTMLTable(url)
url <- "https://raw.githubusercontent.com/dikepower/607_DataAcquisition_And_Management/master/Week7/book.html"
html_df <-  readHTMLTable(url)
url <- "http://raw.githubusercontent.com/dikepower/607_DataAcquisition_And_Management/master/Week7/book.html"
html_df <-  readHTMLTable(url)
setwd("/Volumes/TOSHIBA EXT/Learning/MS_DataScience/607_DataAcquisition_And_Management/Project3")
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(tidyverse)
library(dplyr)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:" ,overwrite =TRUE )
dbListTables(con)
df <-  read.csv(file = "kaggle-survey-2017/multipleChoiceResponses.csv", header= TRUE)
df_freeResponse <- read.csv (file = "kaggle-survey-2017/freeformResponses.csv", header= TRUE)
df_CRate<- read.csv (file = "kaggle-survey-2017/conversionRates.csv", header= TRUE)
df_schema <- read.csv (file = "kaggle-survey-2017/schema.csv", header= TRUE)
# add sequence to the dataframe
df<- tibble::rowid_to_column(df, "ID")
target_col <- c ("ID",  "GenderSelect" ,"Country", "Age"  ,"EmploymentStatus"                  ,"StudentStatus" ,"LearningDataScience",     "MLToolNextYearSelect" ,             "MLMethodNextYearSelect"          ,"LanguageRecommendationSelect"  ,    "JobSkillImportanceBigData"   ,"JobSkillImportanceDegree" ,         "JobSkillImportanceStats" ,"JobSkillImportanceEnterpriseTools", "JobSkillImportancePython"  ,"JobSkillImportanceR"  ,             "JobSkillImportanceSQL"     ,"JobSkillImportanceKaggleRanking" ,  "JobSkillImportanceMOOC"  ,"JobSkillImportanceVisualizations")
df_target <- df[,target_col]
table(df_target$JobSkillImportanceDegree)
df_target %>% select (starts_with("Jobs")) %>% str()
JobImportance <- function(skill)
{  skill<- as.character(skill)
if (skill=='Necessary')
{
return (2)
}
else if (skill=="Nice to have")
{
return (1)
}
else if (skill=="Nice to have")
{
return (-1)
}
else
{
return (0)
}
}
df_target$JobSkillImportanceBigData <- sapply(df_target$JobSkillImportanceBigData, JobImportance)
df_target$JobSkillImportanceDegree <- sapply(df_target$JobSkillImportanceDegree, JobImportance)
df_target$JobSkillImportanceStats <- sapply(df_target$JobSkillImportanceStats, JobImportance)
df_target$JobSkillImportanceEnterpriseTools <- sapply(df_target$JobSkillImportanceEnterpriseTools, JobImportance)
df_target$JobSkillImportancePython <- sapply(df_target$JobSkillImportancePython, JobImportance)
df_target$JobSkillImportanceR <- sapply(df_target$JobSkillImportanceR, JobImportance)
df_target$JobSkillImportanceSQL <- sapply(df_target$JobSkillImportanceSQL, JobImportance)
df_target$JobSkillImportanceKaggleRanking <- sapply(df_target$JobSkillImportanceKaggleRanking, JobImportance)
df_target$JobSkillImportanceMOOC <- sapply(df_target$JobSkillImportanceMOOC, JobImportance)
df_target$JobSkillImportanceVisualizations <- sapply(df_target$JobSkillImportanceVisualizations, JobImportance)
df_target %>% select (starts_with("Jobs")) %>% str()
table(df_target$GenderSelect )
GenderClean <- function(gender)
{  skill<- as.character(gender)
if (gender=='Female')
{
return ('F')
}
else if (gender=="Male")
{
return ("M")
}
else
{
return ("NA")
}
}
df_target$GenderSelect <- sapply(df_target$GenderSelect, GenderClean)
df_target$GenderSelect <- sapply(df_target$GenderSelect, factor)
table(df_target$GenderSelect )
str(df_target)
table (df_target$EmploymentStatus )
EmployeeClean <- function(emp)
{  emp<- as.character(emp)
if (emp=='Independent contractor, freelancer, or self-employed')
{
return ('Self-employed')
}
else if (emp=="Not employed, and not looking for work"|emp=="Not employed, but looking for work")
{
return ("Unemployed")
}
else if (emp=="I prefer not to say")
{
return ("NA")
}
else if (emp=="Employed full-time")
{
return ("Full_Time")
}
else if (emp=="Employed part-time")
{
return ("Part_Time")
}
else
{
return (emp)
}
}
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, EmployeeClean)
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, factor)
table(df_target$EmploymentStatus )
table(df_target)
summary(df_target)
target_col <- c ("ID",  "GenderSelect" ,"Country", "Age"  ,"EmploymentStatus"                  ,"StudentStatus"                     ,"LanguageRecommendationSelect"  ,    "JobSkillImportanceBigData"   ,"JobSkillImportanceDegree" ,         "JobSkillImportanceStats" ,"JobSkillImportanceEnterpriseTools", "JobSkillImportancePython"  ,"JobSkillImportanceR"  ,             "JobSkillImportanceSQL"     ,"JobSkillImportanceKaggleRanking" ,  "JobSkillImportanceMOOC"  ,"JobSkillImportanceVisualizations")
df_target <- df[,target_col]
table(df_target$JobSkillImportanceDegree)
df_target %>% select (starts_with("Jobs")) %>% str()
JobImportance <- function(skill)
{  skill<- as.character(skill)
if (skill=='Necessary')
{
return (2)
}
else if (skill=="Nice to have")
{
return (1)
}
else if (skill=="Nice to have")
{
return (-1)
}
else
{
return (0)
}
}
df_target$JobSkillImportanceBigData <- sapply(df_target$JobSkillImportanceBigData, JobImportance)
df_target$JobSkillImportanceDegree <- sapply(df_target$JobSkillImportanceDegree, JobImportance)
df_target$JobSkillImportanceStats <- sapply(df_target$JobSkillImportanceStats, JobImportance)
df_target$JobSkillImportanceEnterpriseTools <- sapply(df_target$JobSkillImportanceEnterpriseTools, JobImportance)
df_target$JobSkillImportancePython <- sapply(df_target$JobSkillImportancePython, JobImportance)
df_target$JobSkillImportanceR <- sapply(df_target$JobSkillImportanceR, JobImportance)
df_target$JobSkillImportanceSQL <- sapply(df_target$JobSkillImportanceSQL, JobImportance)
df_target$JobSkillImportanceKaggleRanking <- sapply(df_target$JobSkillImportanceKaggleRanking, JobImportance)
df_target$JobSkillImportanceMOOC <- sapply(df_target$JobSkillImportanceMOOC, JobImportance)
df_target$JobSkillImportanceVisualizations <- sapply(df_target$JobSkillImportanceVisualizations, JobImportance)
df_target %>% select (starts_with("Jobs")) %>% str()
table(df_target$GenderSelect )
GenderClean <- function(gender)
{  skill<- as.character(gender)
if (gender=='Female')
{
return ('F')
}
else if (gender=="Male")
{
return ("M")
}
else
{
return ("NA")
}
}
df_target$GenderSelect <- sapply(df_target$GenderSelect, GenderClean)
df_target$GenderSelect <- sapply(df_target$GenderSelect, factor)
table(df_target$GenderSelect )
summary(df_target)
summary(df_target)
str(df_target)
table (df_target$EmploymentStatus )
EmployeeClean <- function(emp)
{  emp<- as.character(emp)
if (emp=='Independent contractor, freelancer, or self-employed')
{
return ('Self-employed')
}
else if (emp=="Not employed, and not looking for work"|emp=="Not employed, but looking for work")
{
return ("Unemployed")
}
else if (emp=="I prefer not to say")
{
return ("NA")
}
else if (emp=="Employed full-time")
{
return ("Full_Time")
}
else if (emp=="Employed part-time")
{
return ("Part_Time")
}
else
{
return (emp)
}
}
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, EmployeeClean)
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, factor)
table(df_target$EmploymentStatus )
str(df_target)
sumdata = data.frame(value= apply(df_target, 2, sum))
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))
sumdata = data.frame(value= apply(df_jobimportance , 2, sum))
sumdata$key= rownames(sumdata)
ggplot(data = sumdata, aes(x=key , y=value, fill=key))+geom_bar()
df_test <- melt(df1, id.vars = "product_id",
measure.vars = grep("^p[0-9]", names(df1), value = TRUE),
variable.name = "p",
value.name = "p_active")
product_id <- c(1, 2, 3, 1, 2, 3, 1, 2, 3)
p1 <- c(0, 0, 1, 1, 0, 0, 1, 0, 0)
p2 <- c(1, 0, 1, 0, 1, 0, 1, 1, 0)
p3 <- c(0, 0, 1, 1, 0, 1, 0, 1, 1)
df1 <- data.frame(product_id, p1, p2, p3)
df2 <- melt(df1, id.vars = "product_id",
measure.vars = grep("^p[0-9]", names(df1), value = TRUE),
variable.name = "p",
value.name = "p_active")
library(reshape2)
product_id <- c(1, 2, 3, 1, 2, 3, 1, 2, 3)
p1 <- c(0, 0, 1, 1, 0, 0, 1, 0, 0)
p2 <- c(1, 0, 1, 0, 1, 0, 1, 1, 0)
p3 <- c(0, 0, 1, 1, 0, 1, 0, 1, 1)
df1 <- data.frame(product_id, p1, p2, p3)
df2 <- melt(df1, id.vars = "product_id",
measure.vars = grep("^p[0-9]", names(df1), value = TRUE),
variable.name = "p",
value.name = "p_active")
print(df2)
df <- read.table(text="Product   F1   F2   F3  F4
P1        1    0    1   1
P2        0    1    1   0
P3        1    0    1   1
P4        0    0    0   1", header=TRUE, strip.white=TRUE)
# reshape the data from wide to long format
require(reshape2)
df2 <- melt(df, id="Product")
# creating a barplot
require(ggplot2)
ggplot(df2, aes(x=Product, y=value, fill=variable)) +
geom_bar(stat="identity")
print (df2)
library(reshape2)
product_id <- c(1, 2, 3, 1, 2, 3, 1, 2, 3)
p1 <- c(0, 0, 1, 1, 0, 0, 1, 0, 0)
p2 <- c(1, 0, 1, 0, 1, 0, 1, 1, 0)
p3 <- c(0, 0, 1, 1, 0, 1, 0, 1, 1)
df1 <- data.frame(product_id, p1, p2, p3)
df2 <- melt(df1, id.vars = "product_id",
measure.vars = grep("^p[0-9]", names(df1), value = TRUE),
variable.name = "p",
value.name = "p_active")
print(df2)
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))%>%sum()
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))%>%sum()
df_jobimportance
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))
df_jobimportance
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))
colSums(df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))
ggplot(data=colSums(df_jobimportance))
df_jobimportance <-  df_target %>% select (starts_with("Jobs"))
plot(data=colSums(df_jobimportance))
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
df_jobimportance
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
typeof( df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
attributes(df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
class(df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
barplot(df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
ggplot(df_jobimportance)+geom_bar()
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
ggplot(data=df_jobimportance)+geom_bar()
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
barplot(df_jobimportance)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
par(las=2) # make label text perpendicular to axis
barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>% select (starts_with("Jobs")) %>%colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
sub ("JobSkillImportance","" df_jobimportance[,1])
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
sub ("JobSkillImportance","" ,df_jobimportance[,1])
#colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
sub ("JobSkillImportance","" ,df_jobimportance[,1])
#colSums()
#par(las=2) # make label text perpendicular to axis
#par(mar=c(5,8,4,2)) # increase y-axis margin.
#barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
df_jobimportance <-sub ("JobSkillImportance","" ,df_jobimportance[,1])
#colSums()
#par(las=2) # make label text perpendicular to axis
#par(mar=c(5,8,4,2)) # increase y-axis margin.
#barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
df_jobimportance <-sub ("JobSkillImportance","" ,df_jobimportance[,1])
df_jobimportance
#colSums()
#par(las=2) # make label text perpendicular to axis
#par(mar=c(5,8,4,2)) # increase y-axis margin.
#barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
#colSums()
#par(las=2) # make label text perpendicular to axis
#par(mar=c(5,8,4,2)) # increase y-axis margin.
#barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
df_jobimportance
#colSums()
#par(las=2) # make label text perpendicular to axis
#par(mar=c(5,8,4,2)) # increase y-axis margin.
#barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
#colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(df_jobimportance, horiz=TRUE)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
#colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(colSums(df_jobimportance), horiz=TRUE)
dbWriteTable(con,  "MCR_Tb", df_target)
dbListTables(con)
dbListFields(con, "MCR_Tb")
dbWriteTable(con,  "MCR_Target_Analysis_Tab", df_target)
dbWriteTable(con,  "MCR_FreeResponse", df_freeResponse)
dbWriteTable(con,  "MCR_Schema", df_schema)
dbWriteTable(con,  "MCR_CurrencyRate", df_CRate)
dbWriteTable(con,  "MCR_multipleChoiceResponses", df )
dbListTables(con)
dbListFields(con, "MCR_Tb")
dbDisconnect(con)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("RSQLite")
#install.packages('tidyverse')
#install.packages('dplyr')
library(RSQLite)
library(tidyverse)
library(dplyr)
# Create an ephemeral in-memory RSQLite database
con <- dbConnect(RSQLite::SQLite(), ":memory:" ,overwrite =TRUE )
dbListTables(con)
df <-  read.csv(file = "kaggle-survey-2017/multipleChoiceResponses.csv", header= TRUE)
df_freeResponse <- read.csv (file = "kaggle-survey-2017/freeformResponses.csv", header= TRUE)
df_CRate<- read.csv (file = "kaggle-survey-2017/conversionRates.csv", header= TRUE)
df_schema <- read.csv (file = "kaggle-survey-2017/schema.csv", header= TRUE)
# add sequence to the dataframe
df<- tibble::rowid_to_column(df, "ID")
target_col <- c ("ID",  "GenderSelect" ,"Country", "Age"  ,"EmploymentStatus"                  ,"StudentStatus"                     ,"LanguageRecommendationSelect"  ,    "JobSkillImportanceBigData"   ,"JobSkillImportanceDegree" ,         "JobSkillImportanceStats" ,"JobSkillImportanceEnterpriseTools", "JobSkillImportancePython"  ,"JobSkillImportanceR"  ,             "JobSkillImportanceSQL"     ,"JobSkillImportanceKaggleRanking" ,  "JobSkillImportanceMOOC"  ,"JobSkillImportanceVisualizations")
df_target <- df[,target_col]
table(df_target$JobSkillImportanceDegree)
df_target %>% select (starts_with("Jobs")) %>% str()
JobImportance <- function(skill)
{  skill<- as.character(skill)
if (skill=='Necessary')
{
return (2)
}
else if (skill=="Nice to have")
{
return (1)
}
else if (skill=="Nice to have")
{
return (-1)
}
else
{
return (0)
}
}
df_target$JobSkillImportanceBigData <- sapply(df_target$JobSkillImportanceBigData, JobImportance)
df_target$JobSkillImportanceDegree <- sapply(df_target$JobSkillImportanceDegree, JobImportance)
df_target$JobSkillImportanceStats <- sapply(df_target$JobSkillImportanceStats, JobImportance)
df_target$JobSkillImportanceEnterpriseTools <- sapply(df_target$JobSkillImportanceEnterpriseTools, JobImportance)
df_target$JobSkillImportancePython <- sapply(df_target$JobSkillImportancePython, JobImportance)
df_target$JobSkillImportanceR <- sapply(df_target$JobSkillImportanceR, JobImportance)
df_target$JobSkillImportanceSQL <- sapply(df_target$JobSkillImportanceSQL, JobImportance)
df_target$JobSkillImportanceKaggleRanking <- sapply(df_target$JobSkillImportanceKaggleRanking, JobImportance)
df_target$JobSkillImportanceMOOC <- sapply(df_target$JobSkillImportanceMOOC, JobImportance)
df_target$JobSkillImportanceVisualizations <- sapply(df_target$JobSkillImportanceVisualizations, JobImportance)
df_target %>% select (starts_with("Jobs")) %>% str()
table(df_target$GenderSelect )
GenderClean <- function(gender)
{  skill<- as.character(gender)
if (gender=='Female')
{
return ('F')
}
else if (gender=="Male")
{
return ("M")
}
else
{
return ("NA")
}
}
df_target$GenderSelect <- sapply(df_target$GenderSelect, GenderClean)
df_target$GenderSelect <- sapply(df_target$GenderSelect, factor)
table(df_target$GenderSelect )
str(df_target)
table (df_target$EmploymentStatus )
EmployeeClean <- function(emp)
{  emp<- as.character(emp)
if (emp=='Independent contractor, freelancer, or self-employed')
{
return ('Self-employed')
}
else if (emp=="Not employed, and not looking for work"|emp=="Not employed, but looking for work")
{
return ("Unemployed")
}
else if (emp=="I prefer not to say")
{
return ("NA")
}
else if (emp=="Employed full-time")
{
return ("Full_Time")
}
else if (emp=="Employed part-time")
{
return ("Part_Time")
}
else
{
return (emp)
}
}
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, EmployeeClean)
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, factor)
table(df_target$EmploymentStatus )
str(df_target)
str(df_target)
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
#colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(colSumsdf_jobimportance, horiz=TRUE)
dbWriteTable(con,  "MCR_Target_Analysis_Tab", df_target)
dbWriteTable(con,  "MCR_FreeResponse", df_freeResponse)
dbWriteTable(con,  "MCR_Schema", df_schema)
dbWriteTable(con,  "MCR_CurrencyRate", df_CRate)
dbWriteTable(con,  "MCR_multipleChoiceResponses", df )
dbListTables(con)
dbListFields(con, "MCR_Tb")
dbListFields(con, "MCR_Target_Analysis_Tab")
df_jobimportance <-  df_target %>%
select (starts_with("Jobs"))
names(df_jobimportance) <- sub ("JobSkillImportance" , "", names(df_jobimportance))
#colSums()
par(las=2) # make label text perpendicular to axis
par(mar=c(5,8,4,2)) # increase y-axis margin.
barplot(colSums(df_jobimportance), horiz=TRUE)
