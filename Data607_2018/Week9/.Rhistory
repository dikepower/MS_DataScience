legend.position="none"
) +
xlab("")
tool_frequency1
library(treemap)
# Plot
tool_frequency2<-treemap(tool_frequency,
# data
index="Tool",
vSize="Most_Time",
type="index",
# Main
title="",
palette="Dark2",
# Borders:
border.col=c("black"),
border.lwds=1,
# Labels
fontsize.labels=0.5,
fontcolor.labels="white",
fontface.labels=1,
bg.labels=c("transparent"),
align.labels=c("left", "top"),
overlap.labels=0.5,
inflate.labels=T                        # If true, labels are bigger when rectangle is bigger.
)
tool_frequency2
rank_by_methods<- select(df2, starts_with("WorkMethodsFrequency"))
glimpse(rank_by_methods)
#create tables to show count of each category of response
Ab_Testing<-table(rank_by_methods$WorkMethodsFrequencyA.B)
Association_Rules<-table(rank_by_methods$WorkMethodsFrequencyAssociationRules)
Bayesian<-table(rank_by_methods$WorkMethodsFrequencyBayesian)
CNN<-table(rank_by_methods$WorkMethodsFrequencyBayesian)
Collaborative_Filtering<-table(rank_by_methods$WorkMethodsFrequencyCollaborativeFiltering)
Cross_Validation<-table(rank_by_methods$WorkMethodsFrequencyCross.Validation)
Data_Visualisation<-table(rank_by_methods$WorkMethodsFrequencyDataVisualization)
Decision_trees<-table(rank_by_methods$WorkMethodsFrequencyDecisionTrees)
Ensemble_methods<-table(rank_by_methods$WorkMethodsFrequencyEnsembleMethods)
Evolutionary_approaches<-table(rank_by_methods$WorkMethodsFrequencyEvolutionaryApproaches)
GANs<-table(rank_by_methods$WorkMethodsFrequencyGANs)
GBMs<-table(rank_by_methods$WorkMethodsFrequencyGBM)
HMMs<-table(rank_by_methods$WorkMethodsFrequencyKNN)
Lift_Analysis<-table(rank_by_methods$WorkMethodsFrequencyLiftAnalysis)
Logistic_Regression<-table(rank_by_methods$WorkMethodsFrequencyLogisticRegression)
MLN<-table(rank_by_methods$WorkMethodsFrequencyMLN)
Naive_Bayes<-table(rank_by_methods$WorkMethodsFrequencyNaiveBayes)
NLP<-table(rank_by_methods$WorkMethodsFrequencyNLP)
Nueral_Networks<-table(rank_by_methods$WorkMethodsFrequencyNeuralNetworks)
PCA<-table(rank_by_methods$WorkMethodsFrequencyPCA)
Prescriptive_modeling<-table(rank_by_methods$WorkMethodsFrequencyPrescriptiveModeling)
Random_Forests<-table(rank_by_methods$WorkMethodsFrequencyRandomForests)
Recommender_Systems<-table(rank_by_methods$WorkMethodsFrequencyRecommenderSystems)
RNNs<-table(rank_by_methods$WorkMethodsFrequencyRNNs)
Segmentation<-table(rank_by_methods$WorkMethodsFrequencySegmentation)
Simulation<-table(rank_by_methods$WorkMethodsFrequencySimulation)
SVMs<-table(rank_by_methods$WorkMethodsFrequencySVMs)
Text_Analysis<-table(rank_by_methods$WorkMethodsFrequencyTextAnalysis)
timeseries_analysis<-table(rank_by_methods$WorkMethodsFrequencyTimeSeriesAnalysis)
#Combine tables
Frequent_methods<-as.data.frame(rbind(Ab_Testing,Association_Rules,Bayesian,CNN,Collaborative_Filtering,Cross_Validation,Data_Visualisation,Decision_trees,Ensemble_methods,Evolutionary_approaches,GANs,GBMs,HMMs,Lift_Analysis,Logistic_Regression,MLN,Naive_Bayes,NLP,Nueral_Networks,PCA,Prescriptive_modeling,Random_Forests,Recommender_Systems,RNNs,Segmentation,Simulation,SVMs,Text_Analysis,timeseries_analysis))
Frequent_methods<-Frequent_methods%>%rownames_to_column("Methods")
colnames(Frequent_methods)[colnames(Frequent_methods)=="V1"] <- "Missing_Values"
Frequency_methods<-select(Frequent_methods,"Methods","Most of the time")# subset the variable Most of the time
names(Frequency_methods)<-c("Methods", "Most_Time") #rename column two
Frequency_methods
library(treemap)
Frequency_methods1<-treemap(Frequency_methods,
index="Methods",
vSize="Most_Time",
type="index",
# Main
title="",
palette="Dark2",
# Borders:
border.col=c("black"),
border.lwds=1,
# Labels
fontsize.labels=0.5,
fontcolor.labels="white",
fontface.labels=1,
bg.labels=c("transparent"),
align.labels=c("left", "top"),
overlap.labels=0.5,
inflate.labels=T
)
Frequency_methods1
df_target <- df
# table(df_target$JobSkillImportanceDegree)
# df_target %>% select (starts_with("Jobs")) %>% str()
JobImportance <- function(skill)
{  skill<- as.character(skill)
if (skill=='Necessary')
{
return (2)
}
else if (skill=="Nice to have")
{
return (1)
}
else if (skill=="Unnecessary")
{
return (-1)
}
else
{
return (0)
}
}
df_target$JobSkillImportanceBigData <- sapply(df_target$JobSkillImportanceBigData, JobImportance)
df_target$JobSkillImportanceDegree <- sapply(df_target$JobSkillImportanceDegree, JobImportance)
df_target$JobSkillImportanceStats <- sapply(df_target$JobSkillImportanceStats, JobImportance)
df_target$JobSkillImportanceEnterpriseTools <- sapply(df_target$JobSkillImportanceEnterpriseTools, JobImportance)
df_target$JobSkillImportancePython <- sapply(df_target$JobSkillImportancePython, JobImportance)
df_target$JobSkillImportanceR <- sapply(df_target$JobSkillImportanceR, JobImportance)
df_target$JobSkillImportanceSQL <- sapply(df_target$JobSkillImportanceSQL, JobImportance)
df_target$JobSkillImportanceKaggleRanking <- sapply(df_target$JobSkillImportanceKaggleRanking, JobImportance)
df_target$JobSkillImportanceMOOC <- sapply(df_target$JobSkillImportanceMOOC, JobImportance)
df_target$JobSkillImportanceVisualizations <- sapply(df_target$JobSkillImportanceVisualizations, JobImportance)
# df_target %>% select (starts_with("Jobs")) %>% str()
# table(df_target$GenderSelect )
GenderClean <- function(gender)
{  skill<- as.character(gender)
if (gender=='Female')
{
return ('F')
}
else if (gender=="Male")
{
return ("M")
}
else
{
return ("NA")
}
}
df_target$GenderSelect <- sapply(df_target$GenderSelect, GenderClean)
df_target$GenderSelect <- sapply(df_target$GenderSelect, factor)
# table(df_target$GenderSelect )
# table(df_target$EmploymentStatus )
EmployeeClean <- function(emp)
{  emp<- as.character(emp)
if (emp=='Independent contractor, freelancer, or self-employed')
{
return ('Self-employed')
}
else if (emp=="Not employed, and not looking for work"|emp=="Not employed, but looking for work")
{
return ("Unemployed")
}
else if (emp=="I prefer not to say")
{
return ("NA")
}
else if (emp=="Employed full-time")
{
return ("Full_Time")
}
else if (emp=="Employed part-time")
{
return ("Part_Time")
}
else
{
return (emp)
}
}
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, EmployeeClean)
df_target$EmploymentStatus <- sapply(df_target$EmploymentStatus, factor)
# table(df_target$EmploymentStatus )
# str(df_target)
JobskillImportance <-  df_target %>%
select (starts_with("Jobs")) %>% select (c(1:9))
JobskillImportance<- tibble::rowid_to_column(JobskillImportance, "ID")
names(JobskillImportance) <- sub ("JobSkillImportance" , "", names(JobskillImportance))
gather_p4 <- JobskillImportance %>% gather (JobSkill, Rate, 2:9)%>% select(ID,JobSkill, Rate)
plot4 <- ggplot(gather_p4, aes(JobSkill, Rate))
plot4 +stat_summary(fun.y=sum,geom = "bar", aes(fill =JobSkill  ), position = position_stack(reverse= TRUE)) + coord_flip()
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
df_target_filter <- subset(df_target, (str_length(df_target['LanguageRecommendationSelect'])>2))
p5 <- df_target_filter %>%
select (LanguageRecommendationSelect,GenderSelect)
ggplot(p5, aes(LanguageRecommendationSelect)) +geom_bar( aes(fill=GenderSelect))
#p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
# geom_bar(aes(fill = GenderSelect),stat = 'identity') +
#  theme_minimal() +   theme(axis.text.x = element_text(angle = 60, hjust = 1))
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
df_target_filter <- subset(df_target, (str_length(df_target['LanguageRecommendationSelect'])>2))
p5 <- df_target_filter %>%
select (LanguageRecommendationSelect,GenderSelect)
ggplot(p5, aes(LanguageRecommendationSelect)) +geom_bar( aes(fill=GenderSelect))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +   theme(axis.text.x = element_text(angle = 60, hjust = 1))
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
levels(df_target$LanguageRecommendationSelect)[1] <- "Not specified"
p5 <- df_target %>%
group_by(LanguageRecommendationSelect,GenderSelect) %>%
summarise(n=n()) %>%
arrange(desc(n))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
levels(df_target$LanguageRecommendationSelect)[1]
levels(df_target$LanguageRecommendationSelect)[1] <- "Not specified"
p5 <- df_target %>%
group_by(LanguageRecommendationSelect,GenderSelect) %>%
summarise(n=n()) %>%
arrange(desc(n))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
str(df_target$LanguageRecommendationSelect)
unique(df_target$LanguageRecommendationSelect)
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
#LanguageClean
LanguageClean <- function(skill)
{  skill<- as.character(skill)
if (skill=='')
{
return ('Not Specific')
}
else if (skill=="Other")
{
return ('Not Specific')
}
else
{
return (skill)
}
}
df_target$LanguageRecommendationSelect <- sapply(df_target$LanguageRecommendationSelect , LanguageClean)
str(df_target$LanguageRecommendationSelect)
levels(df_target$LanguageRecommendationSelect)[1] <- "Not specified"
p5 <- df_target %>%
group_by(LanguageRecommendationSelect,GenderSelect) %>%
summarise(n=n()) %>%
arrange(desc(n))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
#LanguageClean
LanguageClean <- function(skill)
{  skill<- as.character(skill)
if (skill=='')
{
return ('Not Specific')
}
else if (skill=="Other")
{
return ('Not Specific')
}
else
{
return (skill)
}
}
df_target$LanguageRecommendationSelect <- sapply(df_target$LanguageRecommendationSelect , LanguageClean)
str(df_target$LanguageRecommendationSelect)
levels(df_target$LanguageRecommendationSelect)[1] <- "Not specified"
p5 <- df_target %>%
group_by(LanguageRecommendationSelect,GenderSelect) %>%
summarise(n=n()) %>%
arrange(desc(n))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+ xlab("LanguageRecomendation")
#df_target$LanguageRecommendationSelect <- str_trim(df_target['LanguageRecommendationSelect'])
#LanguageClean
LanguageClean <- function(skill)
{  skill<- as.character(skill)
if (skill=='')
{
return ('Not Specific')
}
else if (skill=="Other")
{
return ('Not Specific')
}
else
{
return (skill)
}
}
df_target$LanguageRecommendationSelect <- sapply(df_target$LanguageRecommendationSelect , LanguageClean)
str(df_target$LanguageRecommendationSelect)
levels(df_target$LanguageRecommendationSelect)[1] <- "Not specified"
p5 <- df_target %>%
group_by(LanguageRecommendationSelect,GenderSelect) %>%
summarise(n=n()) %>%
arrange(desc(n))
p5 %>% ggplot(aes(x=reorder(LanguageRecommendationSelect,-n),n)) +
geom_bar(aes(fill = GenderSelect),stat = 'identity') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+ xlab("LanguageRecomendation")+ ylab('Total Number of Respondents')
#install.packages('NLP')
#install.packages('slam')
#install.packages("tm", repos="http://R-Forge.R-project.org")
#install.packages("RSQLite")
#install.packages("wordcloud")
#install.packages('kableExtra')
#install.packages('gridExtra')
#install.packages('stats')
#install.packages('DT')
#install.packages('treemap')
#install.packages("stringr")
install.packages('pandoc')
#install.packages('NLP')
#install.packages('slam')
#install.packages("tm", repos="http://R-Forge.R-project.org")
#install.packages("RSQLite")
#install.packages("wordcloud")
#install.packages('kableExtra')
#install.packages('gridExtra')
#install.packages('stats')
#install.packages('DT')
#install.packages('treemap')
#install.packages("stringr")
#install.packages('pandoc')
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC="--- insert directory here ---")
Skills<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
library(tidyverse)
library(tm)
library(wordcloud)
library(knitr)
library(kableExtra)
library(reshape2)
library(RSQLite)
library(gridExtra)
library(stats)
library(DT)
library(ggplot2)
library(treemap )
library(stringr)
Skills_df<-Skills%>%gather(key =Importance, value = Count, c(3:4))
#Skills
g<-ggplot(Skills_df,aes(x= Skill_Name, y =Count)) + geom_bar(stat = "identity",aes(fill = Importance), position = position_stack(reverse= TRUE)) + coord_flip()
g
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
necessary<-select(Skills1,"Skill_Name","Necessary")# subset the variable necessary
#necessary
job_importance<- necessary%>%
#  arrange(necessary)%>%
mutate(Skill_Name=factor(Skill_Name,Skill_Name))%>%
ggplot(aes(x=Skill_Name,y=Necessary)) +
geom_bar(stat="identity", aes(fill= Skill_Name)) +
coord_flip()  +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none"
) +
xlab("Count")
job_importance
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
necessary<-select(Skills1,"Skill_Name","Necessary")# subset the variable necessary
#necessary
job_importance<- necessary%>%
#  arrange(necessary)%>%
mutate(Skill_Name=factor(Skill_Name,Skill_Name))%>%
ggplot(aes(x=Skill_Name,y=Necessary)) +
geom_bar(stat="identity", aes(fill= Skill_Name)) +
coord_flip()  +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none"
) +
xlab("Count")
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
necessary<-select(Skills1,"Skill_Name","Necessary")# subset the variable necessary
#necessary
job_importance<- necessary%>%
#  arrange(necessary)%>%
mutate(Skill_Name=factor(Skill_Name,Skill_Name))%>%
ggplot(aes(x=Skill_Name,y=Necessary)) +
geom_bar(stat="identity", aes(fill= Skill_Name)) +
coord_flip()  +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none"
) +
xlab("Count")
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
necessary<-select(Skills1,"Skill_Name","Necessary")# subset the variable necessary
#necessary
necessary%>%
#  arrange(necessary)%>%
mutate(Skill_Name=factor(Skill_Name,Skill_Name))%>%
ggplot(aes(x=Skill_Name,y=Necessary)) +
geom_bar(stat="identity", aes(fill= Skill_Name)) +
coord_flip()  +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none"
) +
xlab("Count")
Skills1<-select(Skills,"Skill_Name","Necessary","Nice to have", "Unnecessary")
necessary<-select(Skills1,"Skill_Name","Necessary")# subset the variable necessary
#necessary
necessary%>%
#  arrange(necessary)%>%
mutate(Skill_Name=factor(Skill_Name,Skill_Name))%>%
ggplot(aes(x=Skill_Name,y=Necessary)) +
geom_bar(stat="identity", aes(fill= Skill_Name)) +
coord_flip()  +
theme(
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank(),
legend.position = "none"
) +
ylab("Count")
install.packages("httr")
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(httr)
library(jsonlite)
#params
api.key <- "3425bcc40327445bbb77b6245a2a7efc"
yyyy <- "2018"
mm <- "09"
#return JSON from NYT API
get.NytArchives <- function(api.key,yyyy,mm){
base.url <-  paste("https://api.nytimes.com/svc/archive/v1/",yyyy,"/",mm,".json",sep="")
print(paste("Collecting NYT archvies data for: ",toString(yyyy),"-",toString(mm)))
#get seems to fail sometimes, so keep on tryin'
query <- RETRY("GET","https://api.nytimes.com/svc/archive/v1/1929/9.json",
query = list(api_key=api.key),
times = 100,
pause_base = 2)
query <- content(query,as="text",encoding="UTF-8")
df <-  as.data.frame(fromJSON(query))
#clean up the column names
colnames(df) <- gsub("^.*\\.","", colnames(df))
return(df)
}
result <- get.NytArchives(api.key,"2018","9")
kable(colnames(result),col.names = "Column Names")
table(colnames(result),col.names = "Column Names")
kable(colnames(result),col.names = "Column Names")
df <- data.frame(matrix(ncol = 2, nrow=0))
colnames(df) <- c("web_url","snippet")
for (i in 1:5){
data <- get.NytArchives(api.key,1929,i)
df<- rbind(df,data[c("web_url","snippet")])
}
df <- data.frame(matrix(ncol = 2, nrow=0))
colnames(df) <- c("web_url","snippet")
for (i in 1:5){
data <- get.NytArchives(api.key,2018,i)
df<- rbind(df,data[c("web_url","snippet")])
}
#params
api.key <- "3425bcc40327445bbb77b6245a2a7efc"
yyyy <- "2018"
mm <- "09"
#return JSON from NYT API
get.NytArchives <- function(api.key,yyyy,mm){
base.url <-  paste("https://api.nytimes.com/svc/archive/v1/",yyyy,"/",mm,".json",sep="")
print(paste("Collecting NYT archvies data for: ",toString(yyyy),"-",toString(mm)))
#get seems to fail sometimes, so keep on tryin'
query <- RETRY("GET","https://api.nytimes.com/svc/archive/v1/2011/09.json",
query = list(api_key=api.key),
times = 100,
pause_base = 2)
query <- content(query,as="text",encoding="UTF-8")
df <-  as.data.frame(fromJSON(query))
#clean up the column names
colnames(df) <- gsub("^.*\\.","", colnames(df))
return(df)
}
df <- data.frame(matrix(ncol = 2, nrow=0))
colnames(df) <- c("web_url","snippet")
for (i in 1:5){
data <- get.NytArchives(api.key,2018,i)
df<- rbind(df,data[c("web_url","snippet")])
}
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
library(knitr)
library(kableExtra)
#params
api.key <- "3425bcc40327445bbb77b6245a2a7efc"
yyyy <- "2017"
mm <- "09"
#return JSON from NYT API
get.NytArchives <- function(api.key,yyyy,mm){
base.url <-  paste("https://api.nytimes.com/svc/archive/v1/",yyyy,"/",mm,".json",sep="")
print(paste("Collecting NYT archvies data for: ",toString(yyyy),"-",toString(mm)))
#get seems to fail sometimes, so keep on tryin'
query <- RETRY("GET","https://api.nytimes.com/svc/archive/v1/2017/09.json",
query = list(api_key=api.key),
times = 100,
pause_base = 2)
query <- content(query,as="text",encoding="UTF-8")
df <-  as.data.frame(fromJSON(query))
#clean up the column names
colnames(df) <- gsub("^.*\\.","", colnames(df))
return(df)
}
result <- get.NytArchives(api.key,"2017","9")
